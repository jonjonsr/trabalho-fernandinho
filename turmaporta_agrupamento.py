# -*- coding: utf-8 -*-
"""turmaporta_agrupamento

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WM-JJB1lAvlnmWULxkL0n9HaC6C7ACK

import numpy as np

from sklearn.cluster import KMeans

filmes_assistidos = np.array([
    [1, 0, 0, 1], #usuario 1
    [1, 1, 0, 0], #usuario 2
    [0, 1, 1, 0], #usuario 3
    [0, 0, 1, 1], #usuario 4
    [1, 0, 1, 0], #usuario 5
    [0, 1, 0, 1], #usuario 6
])

#treinar modelo

num_clusters = 2

Kmeans = KMeans(n_clusters=num_clusters,random_state=0,n_init=10)
Kmeans.fit(filmes_assistidos)
"""

import numpy as np

from sklearn.cluster import KMeans

filmes_assistidos = np.array([
  [1, 0, 0, 1], #usuario 1
  [1, 1, 0, 0], #usuario 2
  [0, 1, 1, 0], #usuario 3
  [0, 0, 1, 1], #usuario 4
  [1, 0, 1, 0], #usuario 5
  [0, 1, 0, 1], #usuario 6
])

#treinar modelo

num_clusters = 2
KMeans = KMeans (n_clusters=num_clusters,random_state=0,n_init=10)
KMeans.fit (filmes_assistidos)

#classificando os usuarios
grupos_indice = KMeans.predict(filmes_assistidos)

#exibir dados
print("usuario pertence ao segunte grupo: ")
for i, cluster in enumerate(grupos_indice):
  print(f"usuario {i+1} pertence ao grupo {cluster+1}")

print("\nfilmews assistidos:")
for i in range(len(filmes_assistidos)):
  assistidos = np.where(filmes_assistidos[i] ==1)[0] + 1
  print(f"usuario {i+1} assistiu aos filmes: {assistidos}")

  #FUNCAO RECOMENDAR FILME
  def recomendar_filme(filmes, filmes_assistidos, grupis_indice):

    filmes = np.array(filmes)

    #encontrar ogrupo com base em seu vetor de filmes assistidos
    usuario_id = len(filmes_assistidos)
    grupo_usuario = KMeans.predict([filmes])[0]

    #encontrar todos os usuarios do mesmo grupo
    usuario_no_mesmo_grupo = [i for i in range(len(grupos_indice))
    if grupos_indice[i] == grupo_usuario]

    #filmes assistidos pelos usuarios no mesmo grupo
    filmes_recomendados = set()
    for usuario in usuario_no_mesmo_grupo:
      filmes_assistidos_usuario = np.where(filmes_assistidos[usuario] == 1)[0]
      filmes_recomendados.update(filmes_assistidos_usuario)

      #remover filmes que o usuario ja assistiu
      filmes_recomendados = filmes_recomendados = set(np.where(filmes ==1)[0])

      #ajustar os indices dos filmes recomendados
      filmes_recomendados = [filme + 1 for filme in filmes_recomendados]

      return sorted(filmes_recomendados)

filmes_assistidos_usuario = [1, 0, 1, 0]

filmes_recomendados = recomendar_filme(filmes_assistidos_usuario, filmes_assistidos, grupos_indice)

print(f"\nFilmes recomendados: {filmes_recomendados}")

def multiplicacao(num1, num2) :
  mult